broom::tidy(teach_lm, conf.int = TRUE)
library(ggfortify) # remember to load this package
ggplot2::autoplot(teach_lm,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
oneway.test(exam ~ group, data = teach_tib)
parameters::model_parameters(teach_lm, robust = TRUE, vcov.type = "HC4", digits = 3)
hero_tib <- discovr::superhero
hero_tib
levels(hero_tib$hero)
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
hgeom_violin() +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 70)) +
scale_y_continuous(breaks = seq(0, 70, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 70)) +
scale_y_continuous(breaks = seq(0, 70, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(fill = "#d47500", colour = "#d47500", alpha = 0.3) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 70)) +
scale_y_continuous(breaks = seq(0, 70, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(fill = "#d47500", colour = "#d47500", alpha = 0.3) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(fill = "#d47500", colour = "#d47500", alpha = 0.1) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(colour = "#d47500", alpha = 0.1) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(colour = "#d47500", alpha = 0.5) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(hero_tib, aes(hero, injury)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
teach_table <- tibble(
`Group` = c("Superman", "Spiderman", "Hulk", "Ninja Turtle"),
`Flying vs. non` = c(1/2, 1/2, -1/2, -1/2),
`Superman vs. Spiderman` = c(1/2, -1/2, 0, 0),
`Hulk vs. Ninja turtle` = c(0, 0, 1/2, -1/2)
)
teach_table
flying_vs_not <- c(1/2, 1/2, -1/2, -1/2)
super_vs_spider <- c(1/2, -1/2, 0, 0)
hulk_vs_ninja <- c(0, 0, 1/2, -1/2)
contrasts(hero_tib$hero) <- cbind(reward_vs_other, indifferent_vs_punish)
hero_tib$hero
flying_vs_not <- c(1/2, 1/2, -1/2, -1/2)
super_vs_spider <- c(1/2, -1/2, 0, 0)
hulk_vs_ninja <- c(0, 0, 1/2, -1/2)
contrasts(hero_tib$hero) <- cbind(flying_vs_not, super_vs_spider, hulk_vs_ninja)
contrasts(hero_tib$hero) # check the contrasts are set correctly
hero_lm <- lm(injury ~ hero, data = hero_tib)
anova(hero_lm) %>%
parameters::parameters(., omega_squared = "raw")
broom::tidy(hero_lm, conf.int = TRUE)
broom::tidy(hero_lm, conf.int = TRUE) %>%
knitr::kable(digits = 3)
broom::tidy(hero_lm, conf.int = TRUE)
library(ggfortify) # remember to load this package
ggplot2::autoplot(hero_lm,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
oneway.test(injury ~ hero, data = hero_tib)
parameters::model_parameters(hero_lm, robust = TRUE, vcov.type = "HC4", digits = 3)
soya_tib <- discovr::soya
soya_tib
levels(soya_tib$soya)
ggplot2::ggplot(soya_tib, aes(soya, sperm)) +
geom_boxplot(colour = "#d47500", alpha = 0.7) +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Method of teaching", y = "Percentage on exam") +
theme_minimal()
ggplot2::ggplot(soya_tib, aes(soya, sperm)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.7) +
coord_cartesian(ylim = c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(x = "Number of soya meals per week", y = "Sperm count (Millions)") +
theme_minimal()
ggplot2::ggplot(soya_tib, aes(soya, sperm)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.3) +
coord_cartesian(ylim = c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(x = "Number of soya meals per week", y = "Sperm count (Millions)") +
theme_minimal()
# library(ggfortify) # remember to load this package
lm(sperm ~ soya, data = soya_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
lm(sperm ~ soya, data = soya_tib) %>%
parameters::model_parameters(., robust = TRUE, vcov.type = "HC4", digits = 3)
oneway.test(sperm ~ soya, data = soya_tib)
tumour_tib <- discovr::tumour
tumour_tib
levels(tumour_tib$usage)
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 90)) +
scale_y_continuous(breaks = seq(0, 90, 10)) +
labs(x = "Costume worn", y = "Injury severity (0-100") +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 10)) +
scale_y_continuous(breaks = 0:10) +
labs(x = "Costume worn", y = "Injury severity (0-100") +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = "Injury severity (0-100") +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = "Size of tumour (in mm\^3)") +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = "Size of tumour (in mm\\^3)") +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = expression("Size of tumour (in mm^3)") +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = expression(Size of tumour (in mm^3)) +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = expression(Size~of~tumour~(in~mm^3)) +
expression(Size~of~tumour~(in~mm^3)
expression(Size~of~tumour~(mm^3)
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Vc[max](mu~mol ~CO[2]~ m^-2~s^-1))) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote("Size of  tumour (in mm3)"Vc[max](mu~mol ~CO[2]~ m^-2~s^-1))) +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~Vc[max](mu~mol ~CO[2]~ m^-2~s^-1))) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~(~m^3)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~(m^3)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~m^3) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~m) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~())) +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~()) +
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~(mm)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~mm^3) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~mm) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~mm)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~mm^3)) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Costume worn", y = bquote(Size~of~tumour~(mm^3))) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
geom_violin(colour = "#d47500", alpha = 0.7) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Hours on phone per day", y = bquote(Size~of~tumour~(mm^3))) +
theme_minimal()
ggplot2::ggplot(tumour_tib, aes(usage, tumour)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Hours on phone per day", y = bquote(Size~of~tumour~(mm^3))) +
theme_minimal()
# library(ggfortify) # remember to load this package
lm(tumour ~ usage, data = tumour_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
# library(ggfortify) # remember to load this package
lm(tumour ~ usage, data = tumour_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
oneway.test(tumour ~ usage, data = tumour_tib)
lm(tumour ~ usage, data = tumour_tib) %>%
parameters::model_parameters(., robust = TRUE, vcov.type = "HC4", digits = 3)
glasters_tib <- discovr::glastonbury
glasters_tib
glasters_tib
levels(glasters_tib$subculture)
ggplot2::ggplot(glasters_tib, aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
ggplot2::ggplot(glasters_tib, aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(0, -5)) +
scale_y_continuous(breaks = 0:-5) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
ggplot2::ggplot(glasters_tib, aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 2, 0.5) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
ggplot2::ggplot(glasters_tib, aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 2, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
ggplot2::ggplot(glasters_tib, aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 0, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>%
ggplot2::ggplot(., aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 0, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>% # filter out cases that have NA (missing values) on the outcome variable
ggplot2::ggplot(., aes(subculture, change)) +
stat_summary(fun.data = "mean_cl_boot", colour = "#5c97bf") +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 0, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>% # filter out cases that have NA (missing values) on the outcome variable
ggplot2::ggplot(., aes(subculture, change)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.3) +
coord_cartesian(ylim = c(-2, 0)) +
scale_y_continuous(breaks = seq(-2, 0, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>% # filter out cases that have NA (missing values) on the outcome variable
ggplot2::ggplot(., aes(subculture, change)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.3) +
coord_cartesian(ylim = c(-2, 2)) +
scale_y_continuous(breaks = seq(-2, 2, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>% # filter out cases that have NA (missing values) on the outcome variable
ggplot2::ggplot(., aes(subculture, change)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.3) +
coord_cartesian(ylim = c(-3, 2)) +
scale_y_continuous(breaks = seq(-3, 2, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
glasters_tib %>%
dplyr::filter(!is.na(change)) %>% # filter out cases that have NA (missing values) on the outcome variable
ggplot2::ggplot(., aes(subculture, change)) +
geom_boxplot(colour = "#d47500", fill = "#d47500", alpha = 0.3) +
coord_cartesian(ylim = c(-3, 1.5)) +
scale_y_continuous(breaks = seq(-3, 1.5, 0.5)) +
labs(x = "Subculture", y = "Change in hygiene scores across the festival") +
theme_minimal()
# library(ggfortify) # remember to load this package
lm(change ~ subculture, data = glasters_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
stink_lm <- lm(change ~ subculture, data = glasters_tib)
anova(stink_lm) %>%
parameters::parameters(., omega_squared = "raw")
broom::tidy(stink_lm, conf.int = TRUE)
broom::tidy(stink_lm, conf.int = TRUE) %>%
knitr::kable(digits = 3)
broom::tidy(stink_lm, conf.int = TRUE)
broom::tidy(stink_lm, conf.int = TRUE) %>%
knitr::kable(digits = 3)
eggs_tib <- discovr::cetinkaya_2006
ggplot2::ggplot(eggs_tib, aes(groups, efficiency)) +
geom_boxplot(colour = "#5c97bf", fill = "#5c97bf", alpha = 0.4) +
coord_cartesian(ylim = c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(x = "Fetish group", y = "Copulatory efficiency") +
theme_minimal()
ggplot2::ggplot(eggs_tib, aes(groups, efficiency)) +
geom_boxplot(colour = "#5c97bf", fill = "#5c97bf", alpha = 0.4) +
coord_cartesian(ylim = c(0, 35)) +
scale_y_continuous(breaks = seq(0, 35, 5)) +
labs(x = "Fetish group", y = "Copulatory efficiency") +
theme_minimal()
WRS2::t1way(efficiency ~ groups, data = eggs_tib, nboot = 1000)
WRS2::lincon(efficiency ~ groups, data = eggs_tib)
murder_tib <- discovr::murder
murder_tib
levels(murder_tib$street)
murder_tib <- readr::read_csv("../data/murder.csv") %>%
dplyr::mutate(
street = forcats::as_factor(street) %>% forcats::fct_relevel(., "Ruskin Avenue", "Acacia Avenue", "Rue Morgue")
)
murder_tib <- discovr::murder
murder_tib
ggplot2::ggplot(murder_tib, aes(street, murder)) +
geom_boxplot(colour = "#5c97bf", fill = "#5c97bf", alpha = 0.4) +
coord_cartesian(ylim = c(0, 5)) +
scale_y_continuous(breaks = seq(0, 5, 4)) +
labs(x = "Fetish group", y = "Copulatory efficiency (out of 33)") +
theme_minimal()
ggplot2::ggplot(murder_tib, aes(street, murder)) +
geom_boxplot(colour = "#5c97bf", fill = "#5c97bf", alpha = 0.4) +
coord_cartesian(ylim = c(0, 5)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Street name", y = "Number of murders per month") +
theme_minimal()
ggplot2::ggplot(murder_tib, aes(street, murder)) +
geom_boxplot(colour = "#5c97bf", fill = "#5c97bf", alpha = 0.4) +
coord_cartesian(ylim = c(0, 7)) +
scale_y_continuous(breaks = 0:7) +
labs(x = "Street name", y = "Number of murders per month") +
theme_minimal()
WRS2::t1waybt(murder ~ street, data = murder_tib, nboot = 1000)
WRS2::t1waybt(murder ~ street, data = murder_tib, nboot = 1000)
?t1waybt
WRS2::mcppb20(murder ~ street, data = murder_tib)
WRS2::t1way(murder ~ street, data = murder_tib, nboot = 1000)
# library(ggfortify) # remember to load this package
lm(murder ~ street, data = murder_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
# library(ggfortify) # remember to load this package
lm(murder ~ street, data = murder_tib) %>%
ggplot2::autoplot(.,
which = c(1, 3, 2, 4),
colour = "#5c97bf",
smooth.colour = "#ef4836",
alpha = 0.5,
size = 1) +
theme_minimal()
WRS2::t1waybt(murder ~ street, data = murder_tib, nboot = 1000)
